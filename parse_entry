#!/bin/bash

# Parse a bibliographical entry and tags it. Uses the data available in tags/

# The following function tries to isolate 'semantic entities' (i.e. blocks of
# text that have a meaning together) and to find them in the tags/* files.
#
# When that works, the bibliographical entry is tagged with the name of the
# tags/* file that matches.
#
#
# ====> THIS FUNCTION SHOULD BE *CLEAN*, i.e. NO F**** GUESSES HERE <====
#
# (it must work for *all* kinds of keywords at once)
function auto_annotate_from_db() {
    #echo "$l" >&2
    l="$(echo "$*" | sed "s/ *, */, /g")"
    tags="$(echo "$l" | tr '0-9()' ', ' | grep -o -P "(\w[\w-]*\.* )*\w[\w-]*\.{0,1}" | # (Words can contain a '-', i.e. Addison-Wesley)
	while read l; do
	    grep -o -x -F "$l" tags/*
	done | sed "s/:/ /")"

    #echo "$l" | tr '0-9()' ', ' | grep -o -P "([\w\-]+\.* )*[\w-]+\.{0,1}" >&2
    if [ -n "$tags" ]; then
	while read tag content; do
	    tag="$(basename "$tag")"
            l="$(echo ${l}, | perl -ape "s/([,\(;] *)$content,/\1╠$tag=$content╣,/g")"
	done < <(echo "$tags")
    fi
    echo $l
}

function get_tag () {
    while read a; do
	echo "$a" | grep -o -P "╠$1=[^╣]*╣" | perl -ape "s/^.*=(.*)╣$/\1/g"
    done
}

function replace () {
    cat | awk "{gsub(\"$1\", \"$2\", \$0); print}"
}

# Specific function to guess the journal's name. We must try harder, for journal
# names contain lots of '.', and sometimes appear right after the '.' at the end
# of the title. Sometimes they also contain ','
function parse_journal_from_db() {
    if echo "$*" | grep -P "╠journal" > /dev/null; then
	echo "$*" && return 0
    fi

    # TRY ONLY THOSE CONTAINING A ',' first ?

    # Try to remove the first suspicious '.' (end of the title) and see if it works.
    if echo "$*" | grep -P " [[:lower:]]+\." > /dev/null; then
	j="$(auto_annotate_from_db "$(echo "$*" | perl -ape "s/( [[:lower:]]+)\./\1, /g")" | get_tag journal)"
	if [ -n "$j" ]; then
	    echo "$*" | sed "s/$j/, ╠journal=$j╣, /g"
	    return 0
	fi
    fi

    # Try to see if some journal fits, and check (badly) that only one fits (the test is too restrictive but correct)
    j="$(echo "$*" | grep -o -F -f tags/journal)"
    if [ -n "$j" ] && [ $(grep -F "$j" tags/journal | wc -l) -eq 1 ]; then
    	echo "$*" | sed "s/$j/, ╠journal=$j╣, /g"
    	return 0
    fi

    j="$(echo "$*," | tr '0-9()' ',' | sed 's/ *, */, /g' | grep -F -f /tmp/journals_patterns -o | sed "s/^[ ,\.]*//" | sed "s/,$//")"
    test $? -eq 0 || exit 1
    if [ -z "$j" ]; then
	echo "$*"
    else
	echo "$*" | perl -ape "s/$j/, ╠journal=$j╣,/g"
    fi
}

function guess_authors () {
    b="$(echo "$*" | sed "s/^.*\] *//"g | sed "s/“.*//g")"

    # Starts with Initials.
    # Meant to match the following pattern: I. K. Whatever, K.L. Whateverrr[.,] and O. Thing and J. van der Stuff[.,]
    if [ "${b:1:1}" = "." ]; then
	aut="$(echo $b | \grep -P -o "^((([[:upper:]]\.[ ,]*)+([a-z]{1,4} )*)[^ ]+( and|[[:punct:]]) *)*")"
	echo "$*" | replace "$aut" "╠authors=$aut╣, "
	return 0
    fi

    # Same in the other order, i.e. Whatever I. K., Whateverrrrr K. L.,
    aut="$(echo $b | \grep -P -o "^(([a-z]{1,4} )*[^ ]+[[:punct:]]* +([[:upper:]][[:punct:]]+)+( and|[[:punct:]])+ *)*")"
    if [ -n "$aut" ]; then
	echo "$*" | replace "$aut" "╠authors=$aut╣, "
	return 0
    fi
    echo "$*"
    #aut2="$(echo $b | perl -ape "s/([[:upper:]]\. *)*//g")"
}

cat |
    perl -ape "s/ (Pages|pages|p\.*p\.*|pp|p\.|p|pp\.)* *([0-9]+)[-–]+([0-9]+)/,\. ╠pages=\2–\3╣,/g" |
    perl -ape "s/ ([0-9]+)\(([0-9]+)\):([0-9]{4})[–-]{1,3}([0-9]+)/, ╠vol=\1╣, ╠issue=\2╣, ╠pages=\3–\4╣, /" | # 52(12):1491–1552
    perl -ape "s/ ([0-9]+):([0-9]+)[–-]{1,3}([0-9]+)/, ╠vol=\1╣, ╠pages=\2–\3╣, /" |  # 3:131–150
    perl -ape "s/ [Vv]ol[\. ]*([0-9]+)/,\. ╠vol=\1╣, /g" |
    perl -ape "s/ n[o\.]{0,2} *([0-9]+)/, ╠issue=\1╣, /g" |
    perl -ape "s/ ([0-9]+)pp\.*/, ╠numpages=\1╣, /g" |
    perl -ape "s/\(((19|20)[0-9]{2})\)/,\.╠year=\1╣, /g" |
    perl -ape "s/[,\.]+ *((19|20)[0-9]{2})([,\)\. *]+)/, ╠year=\1╣, \3 /g" |
    perl -ape "s/[Tt]o [Aa]ppear( in)* *[:;\.]*/, ╠to_appear╣, /g" |
    perl -ape "s/ [Pp]reprint([^a-z])/, ╠preprint╣, \1/g" |
    perl -ape "s/ [Ii]n [Pp]reparation([^a-z])/, ╠preprint╣, \1/g" |

    # Inserts , around numbers !!! Can wreck the title.
    perl -ape 's/ ([0-9])/, \1/g' |
    while read l; do auto_annotate_from_db "$l"; done |
    while read ll; do parse_journal_from_db "$ll"; done |
    while read ll; do guess_authors "$ll"; done |
    perl -ape "s/(╠journal=[^╣]*╣)[, ]*([0-9]+)[ ,\.]/\1, ╠vol=\2╣, /g" | # The number that comes after the journal's name is the volume (?)
    cat
